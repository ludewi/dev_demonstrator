"""Information"""
import streamlit as st

st.set_page_config(
     page_title="1. What to do?",
     page_icon="ðŸš€",
     layout="wide",
     initial_sidebar_state="expanded"
    )

st.title('Explanation')
explanantion_name = ['1. Tradition machine learning', '2. Federated Learning', '3. Design of the demonstrator', '4. MNIST-Dataset']
explanantion = st.radio('', explanantion_name)

with st.sidebar:
    st.subheader("Client ID: 001")

if explanantion == '1. Tradition machine learning':
    with st.container():
        st.subheader('How does tradition machine learning works?')
        st.markdown('1. Data is collected on a central Server' )
        st.markdown('2. Machine Learning Modell is trained on central Server')
        st.markdown('3. Machine Learning Modell is send to Clients')
        #st.markdown("To perform **traditional machine learning** data is **collected on a central server**. The ML-Model is then trained on this data. At the end the modell either kept on the server or sent to devices to make predictions on new data.")

        col1, col2, col3 = st.columns([1, 1, 1])
        col1.image("pictures/tradition_ml.PNG", width=370, caption="1. Data is collected on a central Server")
        col2.image("pictures/model_server.gif", caption="2. Machine Learning Modell is trained on central Server")
        col3.image("pictures/data_with_pred.PNG", width=380, caption="3. Clients send a request and recieve a prediction on their data")
elif explanantion == '2. Federated Learning':
    with st.container():
        st.subheader('What is federated learning and how does it work?')

        st.markdown("""To prevent sending **private** or **sensitive data** to a server the concept of f**ederated learning** (FL) was introduced in 2016. With **federated learning**, ML algorithms can be trained on local data **without exchanging data** with a central instance. 
        This is a huge advantage in terms of **data privacy**. A Federated Learning System (FLS) consists of multiple **clients** and one **server**. 
        The clients are usually understood to be end devices such as cell phones that generate the **local data**. 
        The server **orchestrates** the learning. 
        It specifies how many **rounds** are trained, how many **clients** should participate in the training, which **hyperparameters** should be used, and so on.""")
        st.markdown("**Federated training then always follows the same steps:**")

        col1, col2, col3, col4 = st.columns([1, 1, 1, 1])
        col1.image("pictures/client_down_model.PNG", width=300, caption="1. Clients download the ML model from the server")
        col2.image("pictures/client_train_fl.PNG", width=285, caption="2. Clients train the model on their local data")
        col3.image("pictures/client_send_fl_model.PNG", width=300, caption="3. Clients send trained model back to the server")
        col4.image("pictures/server_agg_models.PNG", width=300, caption="4. The server aggregates all received models to one global model.")

        st.markdown("1. First, all clients download the current ML model (such as Logistic Regression, CNN, FFNN) from the server.")
        st.markdown("2. The clients train the model on their local data. This causes the parameters (usually the weights of a neural network) to be adjusted. Since each client has different data, the models of all clients will also have **different parameters** after training.")
        st.markdown("3. Once the training of the clients on the local data is completed, they **only send back the adjusted parameters to the server**.")
        st.markdown("4. The server **aggregates** all received parameters into a new fitted model.")
        st.markdown("Steps 1-4 are executed several times. Thus, it is possible to train a global ML model without exchanging local data with a central instance. "
                        "(vgl. McMahan et al., 2017)")

elif explanantion == '3. Design of the demonstrator':
    with st.container():
        setup = st.container()
        setup.subheader('Design of the demonstrator')

        setup.markdown("The demonstrator is designed to give you a practical example of how federated learning works. The computer you are currently using acts as a **client**.") 
        setup.markdown("Inspired by the MNIST-Dataset our goal is to create an **AI model** that can later **classify the numbers 0-9** based on our generated data.")
        setup.markdown("On this client **data can be generated** (Numbers between 0-9). Since one client can only generate very few numbers it would be helpful to be able to use the data (numbers) generated by other clients to train our model without sharing the actual data.")
        setup.markdown("Therefore we use a technique called **Federated Learning** to train the model.")

        col1, col2, col3 = st.columns([1, 3, 1])
        with col1:
            st.empty()
        with col2:
            st.image("pictures/Aufbau.png")
        with col3:
            st.empty()

elif explanantion == '4. MNIST-Dataset':
    with st.container():
        example = st.container()
        example.subheader('What is the MNIST dataset?')
        example.markdown("**MNIST** is a large database of **handwritten digits**. ItÂ´s widely used for machine learning training and testing.")
        example.markdown("In order for the numbers to be used for machine learning, the number images of the MNIST dataset must first be converted into a **form that is understandable** to the computer.")
        example.markdown("All **white color** pixels get the **value 255** and all **black color** pixels get the **value 0**.")

        st.image("pictures/MNIST4.png", width=1200)


# st.subheader('How does tradition machine learning works?')
# st.markdown('1. Data is collected on a central Server' )
# st.markdown('2. Machine Learning Modell is trained on central Server')
# st.markdown('3. Machine Learning Modell is send to Clients')
# #st.markdown("To perform **traditional machine learning** data is **collected on a central server**. The ML-Model is then trained on this data. At the end the modell either kept on the server or sent to devices to make predictions on new data.")

# col1, col2, col3 = st.columns([1, 1, 1])
# col1.image("pictures/tradition_ml.PNG", width=370, caption="1. Data is collected on a central Server")
# col2.image("pictures/model_server.gif", caption="2. Machine Learning Modell is trained on central Server")
# col3.image("pictures/tradition_ml_model.PNG", width=380, caption="3. Machine Learning Modell is send to Clients")

# st.write('------------------------------------------------------------------------------')
# explain = st.container()
# explain.subheader('What is federated learning?')

# explain.markdown("To prevent sending **private** or **sensitive data** to a server the concept of f**ederated learning** (FL) was introduced in 2016.")
# explain.markdown("With **federated learning**, ML algorithms can be trained on local data **without exchanging data** with a central instance. This is a huge advantage in terms of **data privacy**.")

# explain.write('')
# explain.subheader('How does federated learning work?')
# explain.markdown("A Federated Learning System (FLS) consists of multiple **clients** and a **server**. The clients are usually understood to be end devices such as cell phones that generate the **local data**. The server **orchestrates** the learning. It specifies how many **rounds** are trained, how many **clients** should participate in the training, which **hyperparameters** should be used, and so on. Federated training then always follows the same steps.")

# col1, col2, col3, col4 = st.columns([1, 1, 1, 1])
# col1.image("pictures/client_down_model.PNG", width=300, caption="1. Clients download the ML model from the server")
# col2.image("pictures/client_train_fl.PNG", width=285, caption="2. Clients train the model on their local data")
# col3.image("pictures/client_send_fl_model.PNG", width=300, caption="3. Clients send trained model back to the server")
# col4.image("pictures/server_agg_models.PNG", width=300, caption="4. The server aggregates all received models to one global model.")

# explain = st.container()
# explain.markdown("1. First, all clients download the current ML model (such as Logistic Regression, CNN, FFNN) from the server.")
# explain.markdown("2. The clients train the model on their local data. This causes the parameters (usually the weights of a neural network) to be adjusted. Since each client has different data, the models of all clients will also have **different parameters** after training.")
# explain.markdown("3. Once the training of the clients on the local data is completed, they **send back only the adjusted parameters to the server**.")
# explain.markdown("4. The server **aggregates** all received parameters into a new fitted model.")
# explain.markdown("Steps 1-4 are executed several times. Thus, it is possible to train a global ML model without exchanging local data with a central instance. "
#                  "(vgl. McMahan et al., 2017)")
                 

# st.write('------------------------------------------------------------------------------')
# setup = st.container()
# setup.subheader('Design of the demonstrator')

# setup.markdown("The demonstrator is designed to give you a practical example of how federated learning works. The computer you are currently using acts as a **client**. On this client data can be generated (here numbers between 0-9).") 
# setup.markdown("Inspired by the MNIST-Dataset our goal is to create an AI model that can later classify the numbers 0-9 based on our generated data. However, we don't want any entity to be able to see our date (the generated numbers) and since one client can only generate very few numbers it would be helpful to be able to use the data (numbers) generated by other clients for our model without sharing the actual data.")

# col1, col2, col3 = st.columns([1, 3, 1])
# with col1:
#     st.empty()
# with col2:
#     st.image("pictures/Aufbau.png")
# with col3:
#     st.empty()

# st.write('------------------------------------------------------------------------------')
# example = st.container()
# example.subheader('What is the MNIST dataset?')
# example.markdown("**MNIST** is a large database of **handwritten digits**. ItÂ´s widely used for machine learning training and testing.")
# example.markdown("In order for the numbers to be used for machine learning, the number images of the MNIST dataset must first be converted into a **form that is understandable** to the computer.")
# example.markdown("All **white color** pixels get the **value 255** and all **black color** pixels get the **value 0**.")

# col1, col2, col3 = st.columns([1, 3, 1])
# with col1:
#     st.empty()
# with col2:
#     st.image("pictures/MNIST4.png")
# with col3:
#     st.empty()
